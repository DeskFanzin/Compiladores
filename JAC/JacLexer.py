# Generated from Jac.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,75,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,
        1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,
        1,6,1,7,1,7,1,8,1,8,1,9,4,9,51,8,9,11,9,12,9,52,1,10,4,10,56,8,10,
        11,10,12,10,57,1,11,4,11,61,8,11,11,11,12,11,62,1,11,1,11,1,12,1,
        12,5,12,69,8,12,10,12,12,12,72,9,12,1,12,1,12,0,0,13,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,1,0,2,3,0,9,
        10,13,13,32,32,1,0,10,10,78,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,1,
        27,1,0,0,0,3,33,1,0,0,0,5,35,1,0,0,0,7,37,1,0,0,0,9,39,1,0,0,0,11,
        41,1,0,0,0,13,43,1,0,0,0,15,45,1,0,0,0,17,47,1,0,0,0,19,50,1,0,0,
        0,21,55,1,0,0,0,23,60,1,0,0,0,25,66,1,0,0,0,27,28,5,112,0,0,28,29,
        5,114,0,0,29,30,5,105,0,0,30,31,5,110,0,0,31,32,5,116,0,0,32,2,1,
        0,0,0,33,34,5,43,0,0,34,4,1,0,0,0,35,36,5,45,0,0,36,6,1,0,0,0,37,
        38,5,42,0,0,38,8,1,0,0,0,39,40,5,47,0,0,40,10,1,0,0,0,41,42,5,37,
        0,0,42,12,1,0,0,0,43,44,5,40,0,0,44,14,1,0,0,0,45,46,5,41,0,0,46,
        16,1,0,0,0,47,48,5,61,0,0,48,18,1,0,0,0,49,51,2,97,122,0,50,49,1,
        0,0,0,51,52,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,20,1,0,0,0,54,
        56,2,48,57,0,55,54,1,0,0,0,56,57,1,0,0,0,57,55,1,0,0,0,57,58,1,0,
        0,0,58,22,1,0,0,0,59,61,7,0,0,0,60,59,1,0,0,0,61,62,1,0,0,0,62,60,
        1,0,0,0,62,63,1,0,0,0,63,64,1,0,0,0,64,65,6,11,0,0,65,24,1,0,0,0,
        66,70,5,35,0,0,67,69,8,1,0,0,68,67,1,0,0,0,69,72,1,0,0,0,70,68,1,
        0,0,0,70,71,1,0,0,0,71,73,1,0,0,0,72,70,1,0,0,0,73,74,6,12,0,0,74,
        26,1,0,0,0,5,0,52,57,62,70,1,6,0,0
    ]

class JacLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PRINT = 1
    PLUS = 2
    MINUS = 3
    TIMES = 4
    OVER = 5
    REM = 6
    OP_PAR = 7
    CL_PAR = 8
    ATTRIB = 9
    NAME = 10
    NUMBER = 11
    SPACE = 12
    COOMENT = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'print'", "'+'", "'-'", "'*'", "'/'", "'%'", "'('", "')'", 
            "'='" ]

    symbolicNames = [ "<INVALID>",
            "PRINT", "PLUS", "MINUS", "TIMES", "OVER", "REM", "OP_PAR", 
            "CL_PAR", "ATTRIB", "NAME", "NUMBER", "SPACE", "COOMENT" ]

    ruleNames = [ "PRINT", "PLUS", "MINUS", "TIMES", "OVER", "REM", "OP_PAR", 
                  "CL_PAR", "ATTRIB", "NAME", "NUMBER", "SPACE", "COOMENT" ]

    grammarFileName = "Jac.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


